# Copyright (c) 2019 Teradici Corporation
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#!/bin/bash

##### Template Variables #####
AD_SERVICE_ACCOUNT_PASSWORD=${ad_service_account_password}
AD_SERVICE_ACCOUNT_USERNAME=${ad_service_account_username}
BUCKET_NAME=${bucket_name}
CAC_EXTRA_INSTALL_FLAGS=${cac_extra_install_flags}
CAC_VERSION=${cac_version}
CAS_MGR_DEPLOYMENT_SA_FILE=${cas_mgr_deployment_sa_file}
CAS_MGR_INSECURE=${cas_mgr_insecure}
CAS_MGR_SCRIPT=${cas_mgr_script}
CAS_MGR_URL=${cas_mgr_url}
DOMAIN_CONTROLLER_IP=${domain_controller_ip}
DOMAIN_NAME=${domain_name}
EXTERNAL_PCOIP_IP=${external_pcoip_ip}
GCP_OPS_AGENT_ENABLE=${gcp_ops_agent_enable}
KMS_CRYPTOKEY_ID=${kms_cryptokey_id}
OPS_SETUP_SCRIPT=${ops_setup_script}
SSL_CERT=${ssl_cert}
SSL_KEY=${ssl_key}
TERADICI_DOWNLOAD_TOKEN=${teradici_download_token}

LOG_FILE="/var/log/teradici/provisioning.log"
PROVISIONING_DIR="/root"

CAC_BIN_PATH="/usr/sbin/cloud-access-connector"
CAC_FILENAME="cloud-access-connector_$CAC_VERSION_Linux.tar.gz"
CAC_INSTALL_LOG="/var/log/teradici/cac-install.log"
CAC_LOCATION_URL="https://dl.teradici.com/$TERADICI_DOWNLOAD_TOKEN/cloud-access-connector/raw/names/cloud-access-connector-linux-tgz/versions/$CAC_VERSION"
CAC_TOKEN_FILE=$PROVISIONING_DIR/cac_token
cd $PROVISIONING_DIR

METADATA_BASE_URI="http://metadata.google.internal/computeMetadata/v1/instance"
METADATA_AUTH_URI="$METADATA_BASE_URI/service-accounts/default/token"

PCOIP_NETWORK_CONF_FILE="/etc/sysctl.d/01-pcoip-cac-network.conf"

export DEBIAN_FRONTEND=noninteractive

log() {
    local message="$1"
    echo "[$(date)] $message"
}

retry() {
    local retry="$1"         # number of retries
    local retry_delay="$2"   # delay between each retry, in seconds
    local shell_command="$3" # the shell command to run
    local err_message="$4"   # the message to show when the shell command was not successful

    local retry_num=0
    until eval $shell_command
    do
        local rc=$?
        local retry_remain=$((retry-retry_num))

        if [ $retry_remain -eq 0 ]
        then
            log $error_message
            return $rc
        fi

        log "$err_message Retrying in $retry_delay seconds... ($retry_remain retries remaining...)"

        retry_num=$((retry_num+1))
        sleep $retry_delay
    done
}

install_prereqs() {
    log "--> Installing dos2unix, python3..."
    apt-get -qq update
    apt install -y dos2unix python3

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to install prerequisites. Exiting provisioning script..."
        exit 1
    fi
}

setup_ops() {
    if [[ -f "/etc/google-cloud-ops-agent/config.yaml" ]]
    then
        log "--> Ops Agent configuration file already exists, skipping custom Ops Agent configuration to avoid overwriting existing settings"
    else
        log "--> Setting up GCP OPs Agent..."

        retry 25 `# 25 retries` \
              5  `# 5s interval` \
              "gsutil cp gs://$BUCKET_NAME/$OPS_SETUP_SCRIPT ." \
              "--> ERROR: Failed to download Logging Agent from bucket $BUCKET_NAME."

        if [ $? -ne 0 ]; then
            log "--> ERROR: Failed to install GCP OPs Agent."
        fi 

        chmod +x $OPS_SETUP_SCRIPT

        . $OPS_SETUP_SCRIPT \
            $LOG_FILE \
            "/var/log/cloud-init-output.log" \
            "/var/log/syslog" \
            "/var/log/teradici/cac-install.log"
    fi
}

get_credentials() {
    # In some cases, the CAS Manager Deployment Service Account key is
    # generated by a new CAS Manager VM that is being created in parallel as the
    # CAC. Loop until the file is found in the storage bucket.

    retry 120 `# 120 retries` \
          60  `# 60s interval` \
          "gsutil cp gs://$BUCKET_NAME/$CAS_MGR_DEPLOYMENT_SA_FILE $PROVISIONING_DIR" \
          "--> ERROR: Failed to download CAS Manager Deployment Service Account key from bucket $BUCKET_NAME."

    # Disable logging of secrets by wrapping the region with set +x and set -x
    set +x

    if [[ -z "$KMS_CRYPTOKEY_ID" ]]; then
        log "--> Script is not using encryption for secrets."

    else
        log "--> Script is using encryption key: $KMS_CRYPTOKEY_ID"

        # Gets key informations needed for decode from kms_cryptokey_id
        # kms_cryptokey_id: projects/<project-id>/locations/<location>/keyRings/<keyring-name>/cryptoKeys/<key-name>
        local kms_location="$(echo $KMS_CRYPTOKEY_ID | cut -d'/' -f4)"
        local kms_keyring="$(echo $KMS_CRYPTOKEY_ID | cut -d'/' -f6)"
        local kms_key="$(echo $KMS_CRYPTOKEY_ID | cut -d'/' -f8)"

        log "--> Decrypting AD service account password..."
        AD_SERVICE_ACCOUNT_PASSWORD=$(echo -n $AD_SERVICE_ACCOUNT_PASSWORD | base64 --decode | gcloud kms decrypt --key "$kms_key" --keyring "$kms_keyring" --location "$kms_location" --ciphertext-file - --plaintext-file -)

        log "--> Decrypting CAS Manager Deployment Service Account JSON file..."
        cat $PROVISIONING_DIR/$CAS_MGR_DEPLOYMENT_SA_FILE | gcloud kms decrypt --key "$kms_key" --keyring "$kms_keyring" --location "$kms_location" --ciphertext-file - --plaintext-file $PROVISIONING_DIR/$CAS_MGR_DEPLOYMENT_SA_FILE
    fi
    set -x
}

get_cac_token() {
    log "--> Retrieving connector token before CAC install..."

    local args=""

    log "--> Downloading CAS Manager python script from the bucket..."
    retry 3 `# 3 retries` \
          5 `# 5s interval` \
          "gsutil cp gs://$BUCKET_NAME/$CAS_MGR_SCRIPT $PROVISIONING_DIR" \
          "--> ERROR: Failed to download CAS Manager python script from gs://$BUCKET_NAME/$CAS_MGR_SCRIPT"
    chmod +x $PROVISIONING_DIR/$CAS_MGR_SCRIPT

    # Ensure line endings are in Unix format
    dos2unix $PROVISIONING_DIR/$CAS_MGR_SCRIPT
    dos2unix $PROVISIONING_DIR/$CAS_MGR_DEPLOYMENT_SA_FILE

    # Set CAC_TOKEN variable using the script's output
    if [ "$CAS_MGR_INSECURE" ]
    then
        args="--insecure"
    fi

    PYTHONWARNINGS="ignore:Unverified HTTPS request" $PROVISIONING_DIR/$CAS_MGR_SCRIPT $PROVISIONING_DIR/$CAS_MGR_DEPLOYMENT_SA_FILE --url $CAS_MGR_URL --out $CAC_TOKEN_FILE $args
    set +x
    CAC_TOKEN=`cat $CAC_TOKEN_FILE`
    set -x
    rm $CAC_TOKEN_FILE

    # Check and exit provisioning script if retrieving connector token failed
    if [ $? -ne 0 ]; then
        log "--> ERROR: Failed to retrieve connector token using CAS Manager script. Exiting provisioning script..."
        exit 1
    fi
}

check_required_vars() {
    set +x
    if [[ -z "$AD_SERVICE_ACCOUNT_PASSWORD" ]]; then
        log "--> ERROR: Missing Active Directory Service Account Password."
        missing_vars="true"
    fi

    if [[ -z "$CAC_TOKEN" ]]; then
        log "--> ERROR: Missing Cloud Access Connector Token."
        missing_vars="true"
    fi
    set -x

    if [[ "$missing_vars" = "true" ]]; then
        log "--> Exiting..."
        exit 1
    fi
}

check_connector_installed() {
    if [[ -f "$CAC_BIN_PATH" ]]; then
        log "--> Connector already installed. Skipping provisioning script..."
        exit 0
    fi
}

config_network() {
    if [[ ! -f $PCOIP_NETWORK_CONF_FILE ]]; then
        log "--> Configuring network..."
        # Note the indented HEREDOC lines must be preceded by tabs, not spaces
        cat <<- EOF > $PCOIP_NETWORK_CONF_FILE
			# System Control network settings for CAC
			net.core.rmem_max=160000000
			net.core.rmem_default=160000000
			net.core.wmem_max=160000000
			net.core.wmem_default=160000000
			net.ipv4.udp_mem=120000 240000 600000
			net.core.netdev_max_backlog=2000
			EOF

        sysctl -p $PCOIP_NETWORK_CONF_FILE
    fi
}

download_cac() {
    log "--> Downloading CAC installer..."
    cac_installer_url="$CAC_LOCATION_URL/$CAC_FILENAME"
    curl -L $cac_installer_url -o $PROVISIONING_DIR/cloud-access-connector.tar.gz
    tar xzvf $PROVISIONING_DIR/cloud-access-connector.tar.gz -C /
}

wait_for_dc() {
    # Wait for service account to be added. Do this last because it takes
    # a while for new AD user to be added in a new Domain Controller.
    # Note: using the domain controller IP instead of the domain name for
    #       the host is more resilient.

    log "--> Updating apt-get package list..."
    retry 5 `# 5 retries` \
          5 `# 5s interval` \
          "apt-get -qq update" \
          "--> ERROR: Failed to update apt-get package list."

    log "--> Installing ldap_utils..."
    retry 5 `# 5 retries` \
          5 `# 5s interval` \
          "apt-get -qq install ldap-utils" \
          "--> ERROR: Failed to install ldap-utils."

    set +x
    log "--> Ensure AD account is available..."
    retry 120 `# 120 retries` \
          10  `# 10s interval` \
          "ldapwhoami \
            -H ldap://$DOMAIN_CONTROLLER_IP \
            -D $AD_SERVICE_ACCOUNT_USERNAME@$DOMAIN_NAME \
            -w $AD_SERVICE_ACCOUNT_PASSWORD \
            -o nettimeout=1" \
          "--> ERROR: AD account $AD_SERVICE_ACCOUNT_USERNAME@$DOMAIN_NAME is not available."
    set -x
    # Check that the domain name can be resolved and that the LDAP port is accepting
    # connections. This could have been all done with the ldapwhoami command, but
    # due to a number of occasional cac-installation issues, such as "domain
    # controller unreachable" or "DNS error occurred" errors, check these explicitly
    # for logging and debug purposes.
    log "--> Ensure domain $DOMAIN_NAME can be resolved..."
    retry 120 `# 120 retries` \
          10  `# 10s interval` \
          "host $DOMAIN_NAME" \
          "--> ERROR: Failed to resolve $DOMAIN_NAME. Continuing..."

    log "--> Ensure domain $DOMAIN_NAME port 636 is reacheable..."
    retry 120 `# 120 retries` \
          10  `# 10s interval` \
          "netcat -vz $DOMAIN_NAME 636" \
          "--> ERROR: Failed to contact $DOMAIN_NAME:636. Continuing..."
}

install_cac() {
    log "--> Installing Cloud Access Connector..."
    local args=""

    log "--> Running command: $CAC_BIN_PATH install"
    log "--> CAC install options:"
    log "  -t <cac_token>"
    log "  --accept-policies"
    log "  --sa-user <ad_service_account_username>"
    log "  --sa-password <ad_service_account_password>"
    log "  --domain $DOMAIN_NAME"
    log "  --retrieve-agent-state true"
    log "  --sync-interval 5"
    log "  --casm-url $CAS_MGR_URL"
    log "  $CAC_EXTRA_INSTALL_FLAGS"

    # Set pipefail option to return status of the connector install command
    set -o pipefail

    if [ "$SSL_KEY" ]
    then
        log "  --ssl-key <ssl_key>"
        log "  --ssl-cert <ssl_cert>"
        
        retry 3 `# 3 retries` \
              5 `# 5s interval` \
              "gsutil cp gs://$BUCKET_NAME/$SSL_KEY $PROVISIONING_DIR" \
              "--> ERROR: Failed to download ssl key from $BUCKET_NAME"
        retry 3 `# 3 retries` \
              5 `# 5s interval` \
              "gsutil cp gs://$BUCKET_NAME/$SSL_CERT $PROVISIONING_DIR" \
              "--> ERROR: Failed to download ssl cert from $BUCKET_NAME"

        args=$args"--ssl-key $PROVISIONING_DIR/$SSL_KEY "
        args=$args"--ssl-cert $PROVISIONING_DIR/$SSL_CERT "
    else
        log "  --self-signed"
        args=$args"--self-signed "
    fi

    if [ "$CAS_MGR_INSECURE" ]
    then
        log "  --casm-insecure"
        args=$args"--casm-insecure "
    fi

    if [ "$EXTERNAL_PCOIP_IP" ]
    then
        log "  --external-pcoip-ip $EXTERNAL_PCOIP_IP"
        args=$args"--external-pcoip-ip $EXTERNAL_PCOIP_IP "
    fi

    set +x

    retry 10 `# 10 retries` \
          10 `# 10s interval` \
          "$CAC_BIN_PATH install \
            -t $CAC_TOKEN \
            --accept-policies \
            --sa-user $AD_SERVICE_ACCOUNT_USERNAME \
            --sa-password "$AD_SERVICE_ACCOUNT_PASSWORD" \
            --domain $DOMAIN_NAME \
            --retrieve-agent-state true \
            --sync-interval 5 \
            --casm-url $CAS_MGR_URL \
            $CAC_EXTRA_INSTALL_FLAGS \
            $args \
            2>&1 | tee -a $CAC_INSTALL_LOG" \
          "--> ERROR: Failed to install Cloud Access Connector."

    if [ $? -ne 0 ]
    then
        log "--> Exiting provisioning script due to an error."
        exit 1
    fi

    log "--> Successfully installed Cloud Access Connector."

    set -x
}

if [[ ! -f "$LOG_FILE" ]]
then
    mkdir -p "$(dirname $LOG_FILE)"
    touch "$LOG_FILE"
    chmod +644 "$LOG_FILE"
fi

log "$(date)"

# Print all executed commands to the terminal
set -x

# Redirect stdout and stderr to the log file
exec &>>$LOG_FILE

install_prereqs

if [[ "$GCP_OPS_AGENT_ENABLE" == "true" ]]
then
    setup_ops
fi

get_credentials

get_cac_token

check_required_vars

check_connector_installed

config_network

download_cac

wait_for_dc

install_cac

docker service ls

log "--> Provisioning script completed successfully."
