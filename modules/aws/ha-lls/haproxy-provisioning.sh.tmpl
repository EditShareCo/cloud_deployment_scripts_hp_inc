#!/usr/bin/env bash

# Copyright Teradici Corporation 2020-2021;  Â© Copyright 2022 HP Development Company, L.P.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

##### Template Variables #####
AWS_REGION=${aws_region}
AWS_SSM_ENABLE=${aws_ssm_enable}
BUCKET_NAME=${bucket_name}
CLOUDWATCH_ENABLE=${cloudwatch_enable}
CLOUDWATCH_SETUP_SCRIPT=${cloudwatch_setup_script}
HAPROXY_BACKUP_IP=${haproxy_backup_ip}
HAPROXY_CONFIG=${haproxy_config}
HAPROXY_MASTER_IP=${haproxy_master_ip}
HAPROXY_VIP=${haproxy_vip}
HAPROXY_VIP_CIDR=${haproxy_vip_cidr}
KEEPALIVED_CONFIG=${keepalived_config}
LLS_BACKUP_IP=${lls_backup_ip}
LLS_MAIN_IP=${lls_main_ip}
NOTIFY_MASTER=${notify_master}

INSTALL_DIR="/root"
LOG_FILE="/var/log/teradici/provisioning.log"
NCAT_PORT=7072

log() {
    echo "[$(date)] $1"
}

retry() {
    local retry="$1"         # number of retries
    local retry_delay="$2"   # delay between each retry, in seconds
    local shell_command="$3" # the shell command to run
    local err_message="$4"   # the message to show when the shell command was not successful

    local retry_num=0
    until eval $shell_command
    do
        local rc=$?
        local retry_remain=$((retry-retry_num))

        if [ $retry_remain -eq 0 ]
        then
            log $error_message
            return $rc
        fi

        log "$err_message Retrying in $retry_delay seconds... ($retry_remain retries remaining...)"

        retry_num=$((retry_num+1))
        sleep $retry_delay
    done
}

setup_cloudwatch(){
    if [[ ! -f "/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log" ]]
    then
        log "--> Setting up AWS CloudWatch Logs..."

        retry 3 `# 3 retries` \
              5 `# 5s interval` \
              "aws s3 cp s3://$BUCKET_NAME/$CLOUDWATCH_SETUP_SCRIPT ." \
              "--> ERROR: Failed to download CloudWatch setup script from s3://$BUCKET_NAME/$CLOUDWATCH_SETUP_SCRIPT."
        chmod +x $CLOUDWATCH_SETUP_SCRIPT
        dos2unix $CLOUDWATCH_SETUP_SCRIPT

        . $CLOUDWATCH_SETUP_SCRIPT $AWS_REGION \
            $LOG_FILE                           "[%a %b %d %H:%M:%S %Z %Y]" \
            "/var/log/cloud-init-output.log"    "at %a, %d %b %Y %H:%M:%S %z." \
            "/var/log/messages"                 "%b %d %H:%M:%S" \
            "/var/log/teradici/user-data.log"   "%a %b %d %H:%M:%S %Z %Y"
    fi
}

# Downloads a file from S3 with retry. Converts using dos2unix and
# make it executable if specified.
s3_get() {
    local src="$1"
    local dst="$2"
    local executable="$3"

    retry 30 `# 30 retries` \
          10 `# 10s interval` \
          "aws s3 cp s3://$src $dst" \
          "ERROR: Failed to download s3://$src."

    dos2unix $dst
    [ $executable ] && chmod +x $dst
}


# Wait for a message using ncat
get_msg_from() {
    local peer="$1"

    local msg=$(nc --recv-only --listen --allow $peer $NCAT_PORT)

    if [ $? != 0 ]
    then
        log "ERROR: Failed to receive message from $peer."
        exit 1
    fi

    echo $msg
}

wait_for_lls() {
    log "Waiting for main PCoIP License Server to be ready before proceeding..."
    local message=$(get_msg_from $LLS_MAIN_IP)
    if [ ! $message == "START_HAPROXY" ]
    then
        log "ERROR: unexpected command from main PCoIP License Server: $command"
        exit 1
    fi
}
#####   "curl --max-time 1 http://$LLS_MAIN_IP:7070/api/1.0/health" \

setup_haproxy() {
    local cfg_file="/etc/haproxy/haproxy.cfg"

    # download config file from S3 bucket
    cp $cfg_file $cfg_file.backup
    s3_get $BUCKET_NAME/$HAPROXY_CONFIG $cfg_file
    
    # Update config file with IPs
    sed -i "s/\$${lls_main_ip}/$LLS_MAIN_IP/" $cfg_file
    sed -i "s/\$${lls_backup_ip}/$LLS_BACKUP_IP/" $cfg_file

    # This command allows haproxy to work
    setsebool -P haproxy_connect_any 1
    
    # turn off selinux as notify-master.sh is not executed
    # TODO: fine tune selinux instead of disabling it
    setenforce 0
    sed -i "s/^SELINUX=enforcing/SELINUX=disabled/" /etc/selinux/config

    systemctl enable --now haproxy
}

setup_keepalived() {
    local cfg_file="/etc/keepalived/keepalived.conf"
    local notify_master="/etc/keepalived/notify_master.sh"

    # download notify_master script from S3 bucket and render script
    s3_get $BUCKET_NAME/$NOTIFY_MASTER $notify_master true
    sed -i "s/\$${vip}/$HAPROXY_VIP/" $notify_master

    # download config file from S3 bucket
    cp $cfg_file $cfg_file.backup
    s3_get $BUCKET_NAME/$KEEPALIVED_CONFIG $cfg_file
    
    # Update config file
    sed -i "s/\$${state}/$${KA_STATE}/" $cfg_file
    sed -i "s/\$${priority}/$${KA_PRIORITY}/" $cfg_file
    sed -i "s/\$${peer_ip}/$${KA_PEER_IP}/" $cfg_file
    sed -i "s:\$${vip_cidr}:$HAPROXY_VIP_CIDR:" $cfg_file

    systemctl enable --now keepalived
}

setup_ssm() {
    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
    systemctl enable amazon-ssm-agent
    systemctl start amazon-ssm-agent
}

set -x

if [[ -f "$LOG_FILE" ]]
then
    log "Provisioning script already run."
    exit 0
fi

mkdir -p "$(dirname $LOG_FILE)"
touch "$LOG_FILE"
chmod 600 "$LOG_FILE"

exec &>> $LOG_FILE

log "$(date) Running $0 as $(whoami)..."

cd $INSTALL_DIR

yum update -y
yum install -y haproxy keepalived nc

if [[ "$CLOUDWATCH_ENABLE" == "true" ]]
then
    setup_cloudwatch
fi

if [[ "$AWS_SSM_ENABLE" == "true" ]]
then
    setup_ssm
fi

# Figure out if this instance is master or backup
MYIP=$(hostname -I)

if [ $MYIP == "$HAPROXY_MASTER_IP" ]
then
    log "Setting up master HAProxy Server..."
    KA_STATE="MASTER"
    KA_PRIORITY="101"
    KA_PEER_IP="$HAPROXY_BACKUP_IP"
elif [ $MYIP == "$HAPROXY_BACKUP_IP" ]
then
    log "Setting up backup HAProxy Server..."
    KA_STATE="BACKUP"
    KA_PRIORITY="100"
    KA_PEER_IP="$HAPROXY_MASTER_IP"
else
    log "ERROR: IP address of this instance $MYIP doesn't match Terraform configuration."
    exit 1
fi

# Need to wait for the main LLS to be up before running HAProxy, otherwise
# HAProxy sees the main LLS down and it would not fail back to main LLS
# even after it comes back up (by design)
wait_for_lls

setup_haproxy

setup_keepalived

log "$0 finished."
