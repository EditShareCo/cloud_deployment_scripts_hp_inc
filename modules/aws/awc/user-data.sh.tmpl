#!/bin/bash

# Â© Copyright 2022 HP Development Company, L.P.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

LOG_FILE="/var/log/teradici/user-data.log"
INSTALL_DIR="/root"

log() {
    local message="$1"
    echo "[$(date)] $message"
}

set -x

if [[ ! -f "$LOG_FILE" ]]
then
    mkdir -p "$(dirname $LOG_FILE)"
    touch "$LOG_FILE"
    chmod 600 "$LOG_FILE"
fi

# Redirect stdout and stderr to the log file
exec &>> $LOG_FILE

log "--> Running $0 as $(whoami)..."

cd $INSTALL_DIR

if [[ ! -f "${provisioning_script}" ]]
then
    yum -y update
    yum -y install dos2unix unzip

    if [[ ! $(which aws) ]]
    then
        # Install AWS CLI directly since it might not be in some Yum Repo (eg. CentOS 8)
        attempts=0
        max_attempts=3
        while [[ $attempts -lt $max_attempts ]]
        do
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
                -o "awscliv2.zip" \
                --max-time 60 &&
                break
            sleep 5
            ((attempts++))
        done
        if [[ $attempts -eq $max_attempts ]]
        then
            log "Failed to download AWS CLI after $attempts attempts, aborting."
            exit 1
        fi
        unzip awscliv2.zip
        ./aws/install

        # Make aws available for root later
        ln -s /usr/local/bin/aws /usr/bin/aws
    fi

    # wait until we have IAM credentials
    # successful command returns a string "access_key ****************XXXX iam-role"
    # missing access key or IAM credentials returns an empty string ""
    until [ ! -z "$(aws configure list | grep access_key | grep iam-role)" ]
    do
        log "Checking for IAM credentials..."
        sleep 5
    done

    log "--> Downloading required files from the bucket..."
    aws s3 cp s3://${bucket_name}/${provisioning_script} .
    chmod +x ${provisioning_script}
    dos2unix ${provisioning_script}

    # EditShare-specific
    log "--> Downloading connector_log_manager.py from the bucket..."
    aws s3 cp s3://${bucket_name}/${log_manager_script} .
    chmod +x ${log_manager_script}
fi

# NOTE we may want to add this to crontab so we can more precisely control when it executes
log "--> Creating cron job for log manager script..."
cat > /etc/cron.weekly/connector_log_manager << EOF
#!/bin/bash
python3 /home/rocky/connector_log_manager.py
EOF
chmod +x /etc/cron.weekly/connector_log_manager

log "--> Executing provisioning script..."
. ${provisioning_script}

# EditShare-specific; done after the aws provisioning script because that installs python3
#log "--> Installing dryable module for log manager script..."
#/usr/bin/pip3 install dryable

log "--> $0 finished."
