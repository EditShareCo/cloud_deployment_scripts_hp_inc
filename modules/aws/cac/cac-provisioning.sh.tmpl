# Copyright Teradici Corporation 2020-2022;  Â© Copyright 2022 HP Development Company, L.P.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#!/bin/bash

LOG_FILE="/var/log/teradici/provisioning.log"

PROVISIONING_DIR="/root"
CAC_BIN_PATH="/usr/sbin/cloud-access-connector"
CAC_TOKEN_FILE=$PROVISIONING_DIR/cac_token
CAC_INSTALL_LOG="/var/log/teradici/cac-install.log"
CAC_LOCATION_URL="https://dl.teradici.com/${teradici_download_token}/cloud-access-connector/raw/names/cloud-access-connector-linux-tgz/versions/${cac_version}"
CAC_FILENAME="cloud-access-connector_${cac_version}_Linux.tar.gz"
cd $PROVISIONING_DIR

PCOIP_NETWORK_CONF_FILE="/etc/sysctl.d/01-pcoip-cac-network.conf"

export DEBIAN_FRONTEND=noninteractive

log() {
    local message="$1"
    echo "[$(date)] $message"
}

retry() {
    local retry="$1"         # number of retries
    local retry_delay="$2"   # delay between each retry, in seconds
    local shell_command="$3" # the shell command to run
    local err_message="$4"   # the message to show when the shell command was not successful

    local retry_num=0
    until eval $shell_command
    do
        local rc=$?
        local retry_remain=$((retry-retry_num))

        if [ $retry_remain -eq 0 ]
        then
            log $error_message
            return $rc
        fi

        log "$err_message Retrying in $retry_delay seconds... ($retry_remain retries remaining...)"

        retry_num=$((retry_num+1))
        sleep $retry_delay
    done
}

install_prereqs() {
    log "--> Installing dos2unix, python3..."
    apt-get -qq update
    apt install -y dos2unix python3 

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to install prerequisites. Exiting provisioning script..."
        exit 1
    fi
}

setup_cloudwatch(){
    if [[ ! -f "/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log" ]]
    then
        log "--> Setting up AWS CloudWatch Logs..."

        retry 3 `# 3 retries` \
              5 `# 5s interval` \
              "aws s3 cp s3://${bucket_name}/${cloudwatch_setup_script} ." \
              "--> ERROR: Failed to download CloudWatch setup script from s3://${bucket_name}/${cloudwatch_setup_script}"
        chmod +x ${cloudwatch_setup_script}
        dos2unix ${cloudwatch_setup_script}

        . ${cloudwatch_setup_script} ${aws_region} \
            $LOG_FILE                           "[%a %b %d %H:%M:%S %Z %Y]" \
            "/var/log/cloud-init-output.log"    "at %a, %d %b %Y %H:%M:%S %z." \
            "/var/log/syslog"                   "%b %d %H:%M:%S" \
            "/var/log/teradici/cac-install.log" 'time=\"%Y-%m-%dT%H:%M:%SZ\"'
    fi
}

get_credentials() {
    # In some cases, the CAS Manager Deployment Service Account key is generated
    # by a new CAS Manager VM that is being created in parallel as the CAC. Loop
    # until the file is found in the storage bucket.

    retry 120 `# 120 retries` \
          60  `# 60s interval` \
          "aws s3 cp s3://${bucket_name}/${cas_mgr_deployment_sa_file} $PROVISIONING_DIR" \
          "--> ERROR: Failed to download CAS Manager deployment Service Account key from bucket ${bucket_name}."

    # Disable logging of secrets by wrapping the region with set +x and set -x
    set +x

    if [[ -z "${customer_master_key_id}" ]]; then
        log "--> Script is not using encryption for secrets."

        AD_SERVICE_ACCOUNT_PASSWORD=${ad_service_account_password}

    else
        log "--> Script is using encryption key: ${customer_master_key_id}"

        log "--> Decrypting AD service account password..."
        AD_SERVICE_ACCOUNT_PASSWORD=$(aws kms decrypt --region ${aws_region} --ciphertext-blob fileb://<(echo "${ad_service_account_password}" | base64 -d) --output text --query Plaintext | base64 -d)

        log "--> Decrypting CAS Manager Deployment Service Account JSON file..."
        CAS_MGR_CREDENTIALS=$(aws kms decrypt --region ${aws_region} --ciphertext-blob fileb://"$PROVISIONING_DIR/${cas_mgr_deployment_sa_file}" --output text --query Plaintext | base64 -d)
        echo $CAS_MGR_CREDENTIALS > $PROVISIONING_DIR/${cas_mgr_deployment_sa_file}
    fi
    set -x
}

get_cac_token() {
    log "--> Retrieving connector token before CAC install..."

    local args=""

    log "--> Downloading CAS Manager python script from the bucket..."
    retry 3 `# 3 retries` \
          5 `# 5s interval` \
          "aws s3 cp s3://${bucket_name}/${cas_mgr_script} $PROVISIONING_DIR" \
          "--> ERROR: Failed to download CAS Manager python script from s3://${bucket_name}/${cas_mgr_script}"
    chmod +x $PROVISIONING_DIR/${cas_mgr_script}

    # Ensure line endings are in Unix format
    dos2unix $PROVISIONING_DIR/${cas_mgr_script}
    dos2unix $PROVISIONING_DIR/${cas_mgr_deployment_sa_file}

    # Set CAC_TOKEN variable using the script's output
    if [ "${cas_mgr_insecure}" ]
    then
        args="--insecure"
    fi

    PYTHONWARNINGS="ignore:Unverified HTTPS request" $PROVISIONING_DIR/${cas_mgr_script} $PROVISIONING_DIR/${cas_mgr_deployment_sa_file} --url ${cas_mgr_url} --out $CAC_TOKEN_FILE $args
    set +x
    CAC_TOKEN=`cat $CAC_TOKEN_FILE`
    set -x
    rm $CAC_TOKEN_FILE

    # Check and exit provisioning script if retrieving connector token failed
    if [ $? -ne 0 ]; then
        log "--> ERROR: Failed to retrieve connector token using CAS Manager script. Exiting provisioning script..."
        exit 1
    fi
}

check_required_vars() {
    set +x
    if [[ -z "$AD_SERVICE_ACCOUNT_PASSWORD" ]]; then
        log "--> ERROR: Missing Active Directory Service Account Password."
        missing_vars="true"
    fi

    if [[ -z "$CAC_TOKEN" ]]; then
        log "--> ERROR: Missing Cloud Access Connector Token."
        missing_vars="true"
    fi
    set -x

    if [[ "$missing_vars" == "true" ]]; then
        log "--> Exiting..."
        exit 1
    fi
}

check_connector_installed() {
    if [[ -f "$CAC_BIN_PATH" ]]; then
        log "--> Connector already installed. Skipping provisioning script..."
        exit 0
    fi
}

config_network() {
    if [[ ! -f $PCOIP_NETWORK_CONF_FILE ]]; then
        log "--> Configuring network..."
        # Note the indented HEREDOC lines must be preceded by tabs, not spaces
        cat <<- EOF > $PCOIP_NETWORK_CONF_FILE
			# System Control network settings for CAC
			net.core.rmem_max=160000000
			net.core.rmem_default=160000000
			net.core.wmem_max=160000000
			net.core.wmem_default=160000000
			net.ipv4.udp_mem=120000 240000 600000
			net.core.netdev_max_backlog=2000
			EOF

        sysctl -p $PCOIP_NETWORK_CONF_FILE
    fi
}

download_cac() {
    log "--> Downloading CAC installer..."
    cac_installer_url="$CAC_LOCATION_URL/$CAC_FILENAME"
    curl -L $cac_installer_url -o $PROVISIONING_DIR/cloud-access-connector.tar.gz
    tar xzvf $PROVISIONING_DIR/cloud-access-connector.tar.gz -C /
}

wait_for_dc() {
    # Wait for service account to be added. Do this last because it takes
    # a while for new AD user to be added in a new Domain Controller.
    # Note: using the domain controller IP instead of the domain name for
    #       the host is more resilient.

    log "--> Updating apt-get package list..."
    retry 5 `# 5 retries` \
          5 `# 5s interval` \
          "apt-get -qq update" \
          "--> ERROR: Failed to update apt-get package list."

    log "--> Installing ldap_utils..."
    retry 5 `# 5 retries` \
          5 `# 5s interval` \
          "apt-get -qq install ldap-utils" \
          "--> ERROR: Failed to install ldap-utils."

    set +x
    log "--> Ensure AD account is available..."
    retry 120 `# 120 retries` \
          10  `# 10s interval` \
          "ldapwhoami \
            -H ldap://${domain_controller_ip} \
            -D ${ad_service_account_username}@${domain_name} \
            -w $AD_SERVICE_ACCOUNT_PASSWORD \
            -o nettimeout=1" \
          "--> ERROR: AD account ${ad_service_account_username}@${domain_name} is not available."
    set -x
    # Check that the domain name can be resolved and that the LDAP port is accepting
    # connections. This could have been all done with the ldapwhoami command, but
    # due to a number of occasional cac-installation issues, such as "domain
    # controller unreachable" or "DNS error occurred" errors, check these explicitly
    # for logging and debug purposes.
    log "--> Ensure domain ${domain_name} can be resolved..."
    retry 120 `# 120 retries` \
          10  `# 10s interval` \
          "host ${domain_name}" \
          "--> ERROR: Failed to resolve ${domain_name}."

    log "--> Ensure domain ${domain_name} port 636 is reacheable..."
    retry 120 `# 120 retries` \
          10  `# 10s interval` \
          "netcat -vz ${domain_name} 636" \
          "--> ERROR: Falied to contact ${domain_name}:636."
}

wait_for_lls() {
    local lls_health_check_url="http://${lls_ip}:7070/api/1.0/health"

    log "--> Performing LLS health check using endpoint $lls_health_check_url..."
    retry 120 `# 120 retries` \
          10  `# 10s interval` \
          # Need to escape Terraform template directive using %%
          "[ $(curl --silent --write-out "%%{http_code}\n" --output /dev/null $lls_health_check_url) -eq 200 ]" \
          "--> ERROR: Timed out trying to perform health check using endpoint $lls_health_check_url. Continuing..."
}

install_cac() {
    log "--> Installing Cloud Access Connector..."
    local args=""

    log "--> Running command: $CAC_BIN_PATH install"
    log "--> CAC install options:"
    log "  -t <cac_token>"
    log "  --accept-policies"
    log "  --sa-user <ad_service_account_username>"
    log "  --sa-password <ad_service_account_password>"
    log "  --domain ${domain_name}"
    log "  --retrieve-agent-state true"
    log "  --sync-interval 5"
    log "  --casm-url ${cas_mgr_url}"
    log "  ${cac_extra_install_flags}"

    # Set pipefail option to return status of the connector install command
    set -o pipefail

    if [ "${ssl_key}" ]
    then
        log "  --ssl-key <ssl_key>"
        log "  --ssl-cert <ssl_cert>"
        retry 3 `# 3 retries` \
              5 `# 5s interval` \
              "aws s3 cp s3://${bucket_name}/${ssl_key} $PROVISIONING_DIR" \
              "--> ERROR: Failed to download ssl key from ${bucket_name}"
        retry 3 `# 3 retries` \
              5 `# 5s interval` \
              "aws s3 cp s3://${bucket_name}/${ssl_cert} $PROVISIONING_DIR" \
              "--> ERROR: Failed to download ssl cert from ${bucket_name}"

        args=$args"--ssl-key $PROVISIONING_DIR/${ssl_key} "
        args=$args"--ssl-cert $PROVISIONING_DIR/${ssl_cert} "
    else
        log "  --self-signed"
        args=$args"--self-signed "
    fi

    if [ "${cas_mgr_insecure}" ]
    then
        log "  --casm-insecure"
        args=$args"--casm-insecure "
    fi

    if [ "${lls_ip}" ]
    then
        log "  --local-license-server-url http://${lls_ip}:7070/request"
        args=$args"--local-license-server-url http://${lls_ip}:7070/request "
    fi

    set +x
    retry 10 `# 10 retries` \
          10 `# 10s interval` \
          "$CAC_BIN_PATH install \
          -t $CAC_TOKEN \
          --accept-policies \
          --sa-user ${ad_service_account_username} \
          --sa-password "$AD_SERVICE_ACCOUNT_PASSWORD" \
          --domain ${domain_name} \
          --retrieve-agent-state true \
          --sync-interval 5 \
          --casm-url ${cas_mgr_url} \
          ${cac_extra_install_flags} \
          $args \
          2>&1 | tee -a $CAC_INSTALL_LOG" \
          "--> ERROR: Failed to install Cloud Access Connector."

    if [ $? -ne 0 ]
    then
        log "--> Exiting provisioning script due to an error."
        exit 1
    fi

    log "--> Successfully installed Cloud Access Connector."
    
    set -x
}

if [[ ! -f "$LOG_FILE" ]]
then
    mkdir -p "$(dirname $LOG_FILE)"
    touch "$LOG_FILE"
    chmod +644 "$LOG_FILE"
fi

# Print all executed commands to the terminal
set -x

# Redirect stdout and stderr to the log file
exec &>>$LOG_FILE

log "$(date) Running $0 as $(whoami)..."

install_prereqs

if [[ "${cloudwatch_enable}" == "true" ]]
then
    setup_cloudwatch
fi

get_credentials

get_cac_token

check_required_vars

check_connector_installed

config_network

download_cac

wait_for_dc

if [ "${lls_ip}" ]
then
    wait_for_lls
fi

install_cac

docker service ls

log "--> Provisioning script completed successfully."
