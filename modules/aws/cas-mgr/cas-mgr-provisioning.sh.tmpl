# Copyright Teradici Corporation 2020-2022;  Â© Copyright 2022 HP Development Company, L.P.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#!/bin/bash

LOG_FILE="/var/log/teradici/provisioning.log"

CAS_MGR_DEPLOYMENT_KEY_NAME="terraform-key"
CAS_MGR_DEPLOYMENT_NAME="terraform-deployment"
CAS_MGR_INSTALL_LOG="/var/log/teradici/cas-mgr-install.log"
CAS_MGR_REPO_SETUP_SCRIPT_URL="https://dl.teradici.com/${teradici_download_token}/cas-manager/cfg/setup/bash.rpm.sh"

INSTALL_DIR="/root"
cd $INSTALL_DIR

log() {
    local message="$1"
    echo "[$(date)] $message"
}

retry() {
    local retry="$1"         # number of retries
    local retry_delay="$2"   # delay between each retry, in seconds
    local shell_command="$3" # the shell command to run
    local err_message="$4"   # the message to show when the shell command was not successful

    local retry_num=0
    until eval $shell_command
    do
        local rc=$?
        local retry_remain=$((retry-retry_num))

        if [ $retry_remain -eq 0 ]
        then
            log $error_message
            return $rc
        fi

        log "$err_message Retrying in $retry_delay seconds... ($retry_remain retries remaining...)"

        retry_num=$((retry_num+1))
        sleep $retry_delay
    done
}

install_prereqs() {
    log "--> Installing dos2unix, python3, firewalld..."
    yum update -y
    yum install -y dos2unix python38 firewalld

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to install prerequisites. Exiting provisioning script..."
        exit 1
    fi

    python3 -m pip install --upgrade requests configparser boto3

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to install Python modules. Exiting provisioning script..."
        exit 1
    fi
}

setup_cloudwatch(){
    if [[ ! -f "/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log" ]]
    then
        log "--> Setting up AWS CloudWatch Logs..."

        retry 3 `# 3 retries` \
              5 `# 5s interval` \
              "aws s3 cp s3://${bucket_name}/${cloudwatch_setup_script} ." \
              "--> ERROR: Failed to download CloudWatch setup script from s3://${bucket_name}/${cloudwatch_setup_script}."
        chmod +x ${cloudwatch_setup_script}
        dos2unix ${cloudwatch_setup_script}

        . ${cloudwatch_setup_script} ${aws_region} \
            $LOG_FILE                                   "[%a %b %d %H:%M:%S %Z %Y]" \
            "/var/log/cloud-init-output.log"            "at %a, %d %b %Y %H:%M:%S %z." \
            "/var/log/messages"                         "%b %d %H:%M:%S" \
            "/var/log/teradici/cas-mgr-install.log"     "%b %d %H:%M:%S" \
            "/var/log/teradici/user-data.log"           "%a %b %d %H:%M:%S %Z %Y"
    fi
}

get_credentials() {
    # Disable logging of secrets by wrapping the region with set +x and set -x
    set +x

    if [ "${cas_mgr_aws_credentials_file}" ]
    then
        retry 720 `# 720 retries` \
              10  `# 10s interval` \
              "aws s3 cp s3://${bucket_name}/${cas_mgr_aws_credentials_file} $INSTALL_DIR" \
              "--> ERROR: Failed to download AWS credentials file from bucket ${bucket_name}."
    fi

    if [[ -z "${customer_master_key_id}" ]]
    then
        log "--> Script is not using encryption for secrets."

        CAS_MGR_GUI_ADMIN_PASSWORD=${cas_mgr_admin_password}
        PCOIP_REGISTRATION_CODE=${pcoip_registration_code}

    else
        log "--> Script is using encryption key: ${customer_master_key_id}"

        log "--> Decrypting CAS Manager GUI Administrator password..."
        CAS_MGR_GUI_ADMIN_PASSWORD=$(aws kms decrypt --region ${aws_region} --ciphertext-blob fileb://<(echo "${cas_mgr_admin_password}" | base64 -d) --output text --query Plaintext | base64 -d)

        log "--> Decrypting PCoIP registration code..."
        PCOIP_REGISTRATION_CODE=$(aws kms decrypt --region ${aws_region} --ciphertext-blob fileb://<(echo "${pcoip_registration_code}" | base64 -d) --output text --query Plaintext | base64 -d)

        if [ "${cas_mgr_aws_credentials_file}" ]
        then
            log "--> Decrypting AWS Service Account credentials file..."
            aws kms decrypt --region ${aws_region} --ciphertext-blob "fileb://$INSTALL_DIR/${cas_mgr_aws_credentials_file}" --output text --query Plaintext | base64 -d > "$INSTALL_DIR/${cas_mgr_aws_credentials_file}.decrypted"
            mv "${cas_mgr_aws_credentials_file}.decrypted" "$INSTALL_DIR/${cas_mgr_aws_credentials_file}"
        fi
    fi

    set -x
}

check_required_vars() {
    set +x
    
    if [[ -z "$PCOIP_REGISTRATION_CODE" ]]
    then
        log "--> ERROR: Missing PCoIP Registration Code."
        missing_vars="true"
    fi

    if [[ -z "$CAS_MGR_GUI_ADMIN_PASSWORD" ]]
    then
        log "--> ERROR: Missing CAS Manager GUI Administrator Password."
        missing_vars="true"
    fi
    set -x

    if [[ "$missing_vars" == "true" ]]
    then
        log "--> Exiting..."
        exit 1
    fi
}

configure_firewall(){
    # Ran into the following dbus error when using firewall-cmd. Using firewall-offline-cmd as a workaround.
    # ERROR:dbus.proxies:Introspect error on :1.30:/org/fedoraproject/FirewallD1: dbus.exceptions.DBusException: org.freedesktop.DBus.Error.NoReply

    firewall-offline-cmd --set-default-zone trusted
    firewall-offline-cmd --add-port=6443/tcp # virtual network flannel
    firewall-offline-cmd --zone=trusted --add-source=10.42.0.0/16 # This subnet is for the pods
    firewall-offline-cmd --zone=trusted --add-source=10.43.0.0/16 # This subnet is for the services

    systemctl enable firewalld
    systemctl start firewalld
}

add_cas_mgr_repo() {
    log "--> Adding CAS Manager repo..."
    curl -1sLf $CAS_MGR_REPO_SETUP_SCRIPT_URL | distro=el codename=8 bash
    yum repolist --enabled teradici-cas-manager*
}

config_selinux() {
    log "--> Configuring SE Linux..."
    yum install -y selinux-policy-base container-selinux
    yum install -y https://github.com/k3s-io/k3s-selinux/releases/download/v0.2.stable.1/k3s-selinux-0.2-1.el7_8.noarch.rpm
    yum install -y cas-manager-selinux
}

install_cas_mgr() {
    log "--> Installing CAS Manager..."
    # TODO: figure out the /dev/tty error
    yum install -y cas-manager 2>&1 | tee -a $CAS_MGR_INSTALL_LOG

    # Install manually
    /usr/local/bin/cas-manager install --accept-policies --self-signed --manifest /tmp/jsonnet-stable.tar.gz --release-notes /tmp/release-notes.xml --debug 2>&1 | tee -a $CAS_MGR_INSTALL_LOG

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to install CAS Manager..."
        exit 1
    fi
}

cas_mgr_setup() {
    local optional_args=""

    log "--> Running CAS Manager setup script..."

    retry 720 `# 720 retries` \
          10  `# 10s interval` \
          "aws s3 cp s3://${bucket_name}/${cas_mgr_setup_script} $INSTALL_DIR" \
          "--> ERROR: Failed to download CAS Manager setup script from s3://${bucket_name}/${cas_mgr_setup_script}."

    dos2unix $INSTALL_DIR/${cas_mgr_setup_script}
    chmod +x $INSTALL_DIR/${cas_mgr_setup_script}

    if [ "${cas_mgr_aws_credentials_file}" ]
    then
        dos2unix $INSTALL_DIR/${cas_mgr_aws_credentials_file}
        chmod 600 $INSTALL_DIR/${cas_mgr_aws_credentials_file}
        optional_args=$optional_args"--aws_key $INSTALL_DIR/${cas_mgr_aws_credentials_file}"
    fi

    log "--> Running CAS Manager setup script with the following options:"
    log "  --deployment_name $CAS_MGR_DEPLOYMENT_NAME"
    log "  --key_file $INSTALL_DIR/${cas_mgr_deployment_sa_file}"
    log "  --key_name $CAS_MGR_DEPLOYMENT_KEY_NAME"
    log "  --password <CAS Manager GUI Administrator Password>"
    log "  --reg_code <PCoIP Registration Code>"
    log "  $optional_args"

    set +x
    PYTHONWARNINGS="ignore:Unverified HTTPS request" \
      $INSTALL_DIR/${cas_mgr_setup_script} \
      --deployment_name $CAS_MGR_DEPLOYMENT_NAME \
      --key_file $INSTALL_DIR/${cas_mgr_deployment_sa_file} \
      --key_name $CAS_MGR_DEPLOYMENT_KEY_NAME \
      --password $CAS_MGR_GUI_ADMIN_PASSWORD \
      --reg_code $PCOIP_REGISTRATION_CODE \
      $optional_args
    set -x

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to run CAS Manager setup script. Exiting provisioning script..."
        exit 1
    fi

    if [ ! -f "$INSTALL_DIR/${cas_mgr_deployment_sa_file}" ]
    then
        log "--> ERROR: CAS Manager Deployment service account key not created. Exiting provisioning script..."
        exit 1
    fi
}

upload_dsa_key() {
    if [[ "${customer_master_key_id}" ]]
    then
        log "--> Encrypting Deployment Service Account key with ${customer_master_key_id}"

        mv $INSTALL_DIR/${cas_mgr_deployment_sa_file} $INSTALL_DIR/${cas_mgr_deployment_sa_file}.orig

        aws kms encrypt \
            --region ${aws_region} \
            --key-id ${customer_master_key_id} \
            --plaintext fileb://$INSTALL_DIR/${cas_mgr_deployment_sa_file}.orig \
            --output text \
            --query CiphertextBlob | base64 -d > $INSTALL_DIR/${cas_mgr_deployment_sa_file}
    fi

    log "--> Uploading Deployment Service Account Key to bucket ${bucket_name}..."

    retry 5 `# 5 retries`\
          5 `# 5s interval` \
          "aws s3 cp $INSTALL_DIR/${cas_mgr_deployment_sa_file} s3://${bucket_name}/" \
          "--> ERROR: Failed to upload Deployment Service Account Key to bucket ${bucket_name}"

    if [ $? -ne 0 ]
    then
        log "--> Exiting provisioning script due to an error."
        exit 1
    fi
}

setup_ssm() {
    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
    systemctl enable amazon-ssm-agent
    systemctl start amazon-ssm-agent
}

if [[ ! -f "$LOG_FILE" ]]
then
    mkdir -p "$(dirname $LOG_FILE)"
    touch "$LOG_FILE"
    chmod +644 "$LOG_FILE"
fi

# Print all executed commands to the terminal
set -x

# Redirect stdout and stderr to the log file
exec &>>$LOG_FILE

log "$(date) Running $0 as $(whoami)..."
install_prereqs

if [[ "${cloudwatch_enable}" == "true" ]]
then
    setup_cloudwatch
fi

if [[ "${aws_ssm_enable}" == "true" ]]
then
    setup_ssm
fi

get_credentials
check_required_vars
configure_firewall
add_cas_mgr_repo
config_selinux
install_cas_mgr
cas_mgr_setup
upload_dsa_key

log "--> Provisioning script completed successfully."
